// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

if ( params.OECI_LIB_VERSION ) {
    library "OpenEnclaveJenkinsLibrary@${params.OECI_LIB_VERSION}"
} else {
    library "OpenEnclaveJenkinsLibrary@master"
    OECI_LIB_VERSION = "master"
}
GLOBAL_ERROR = null

REPOSITORY_NAME = env.REPOSITORY_NAME ?: "openenclave/openenclave"
BRANCH_NAME = env.BRANCH_NAME ?: "master"
DOCKER_TAG = env.DOCKER_TAG ?: "latest"
FULL_TEST_SUITE = env.FULL_TEST_SUITE ?: false
// Regex that includes directory you want to ignore for CI builds.
String IGNORED_DIRS = "^(docs|\\.jenkins/infrastructure)|\\.md\$"

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '90',
                                      artifactNumToKeepStr: '180',
                                      daysToKeepStr: '90',
                                      numToKeepStr: '180')),
            [$class: 'JobRestrictionProperty']])

stage("Compare changes") {
    node(globalvars.AGENTS_LABELS["nonsgx"]) {
        cleanWs()
        checkout([
            $class: 'GitSCM',
            branches: scm.branches + [[name: '*/master']],
            doGenerateSubmoduleConfigurations: false,
            extensions: [[$class: 'SubmoduleOption',
                            disableSubmodules: true,
                            recursiveSubmodules: false,
                            trackingSubmodules: false]], 
            submoduleCfg: [],
            userRemoteConfigs: scm.userRemoteConfigs
        ])
        // Check if git diff vs origin/master contains changes outside of ignored directories
        gitChanges = sh (
            script: """
                    git diff --name-only HEAD origin/master | grep --invert-match --extended-regexp \'${IGNORED_DIRS}\' || true
                    """,
            returnStdout: true
        ).trim()
    }
}

// Skip build with a success if gitChanges is defined and empty (no changes outside of ignored directories).
if (gitChanges != null && gitChanges == '') {
    currentBuild.result = 'SUCCESS'
    return
} else {
    println("Detected the follow file changes: " + gitChanges)
}

try {
    common.emailJobStatus('STARTED')
    stage("Trigger downstream pipelines") {
        parallel (
          "Agnostic Linux" : {
              build job: '/pipelines/Agnostic-Linux',
                    parameters: [string(name: 'REPOSITORY_NAME', value: REPOSITORY_NAME),
                                 string(name: 'BRANCH_NAME', value: BRANCH_NAME),
                                 string(name: 'DOCKER_TAG', value: DOCKER_TAG),
                                 string(name: 'UBUNTU_NONSGX_CUSTOM_LABEL', value: globalvars.AGENTS_LABELS["ubuntu-nonsgx"]),
                                 string(name: 'OECI_LIB_VERSION', value: OECI_LIB_VERSION),
                                 booleanParam(name: 'FULL_TEST_SUITE',value: FULL_TEST_SUITE)]
           },
           "Azure Linux" : {
               build job: '/pipelines/Azure-Linux',
                     parameters: [string(name: 'REPOSITORY_NAME', value: REPOSITORY_NAME),
                                  string(name: 'BRANCH_NAME', value: BRANCH_NAME),
                                  string(name: 'DOCKER_TAG', value: DOCKER_TAG),
                                  string(name: 'UBUNTU_2004_CUSTOM_LABEL', value: globalvars.AGENTS_LABELS["acc-ubuntu-20.04"]),
                                  string(name: 'UBUNTU_1804_CUSTOM_LABEL', value: globalvars.AGENTS_LABELS["acc-ubuntu-18.04"]),
                                  string(name: 'UBUNTU_NONSGX_CUSTOM_LABEL', value: globalvars.AGENTS_LABELS["ubuntu-nonsgx"]),
                                  string(name: 'WINDOWS_NONSGX_CUSTOM_LABEL', value: globalvars.AGENTS_LABELS["windows-nonsgx"]),
                                  string(name: 'OECI_LIB_VERSION', value: OECI_LIB_VERSION),
                                  booleanParam(name: 'FULL_TEST_SUITE',value: FULL_TEST_SUITE)]
           },
           "Intel Linux" : {
               build job: '/pipelines/Intel-Agnostic',
                     parameters: [booleanParam(name: 'FULL_TEST_SUITE',value: FULL_TEST_SUITE)]
           },
           "Azure Windows" : {
               build job: '/pipelines/Azure-Windows',
                     parameters: [string(name: 'REPOSITORY_NAME', value: REPOSITORY_NAME),
                                  string(name: 'BRANCH_NAME', value: BRANCH_NAME),
                                  string(name: 'DOCKER_TAG', value: DOCKER_TAG),
                                  string(name: 'UBUNTU_NONSGX_CUSTOM_LABEL', value: globalvars.AGENTS_LABELS["ubuntu-nonsgx"]),
                                  string(name: 'WINDOWS_2019_CUSTOM_LABEL', value: globalvars.AGENTS_LABELS["acc-win2019"]),
                                  string(name: 'WINDOWS_2019_DCAP_CUSTOM_LABEL', value: globalvars.AGENTS_LABELS["acc-win2019-dcap"]),
                                  string(name: 'OECI_LIB_VERSION', value: OECI_LIB_VERSION),
                                  booleanParam(name: 'FULL_TEST_SUITE',value: FULL_TEST_SUITE)]
           }
        )
    }
} catch(Exception e) {
    println "Caught global pipeline exception :" + e
    GLOBAL_ERROR = e
    throw e
} finally {
    currentBuild.result = (GLOBAL_ERROR != null) ? 'FAILURE' : "SUCCESS"
    common.emailJobStatus(currentBuild.result)
}
